class Tuple{
    int first;
    int second;
    int third;
    
    public Tuple(int first, int second, int third){
        this.first = first;
        this.second = second;
        this.third = third;
    }
}
class Solution{
    public int minStepToReachTarget(int KnightPos[], int TargetPos[], int n){
        Queue<Tuple> q = new LinkedList<Tuple>();
        boolean[][] vis = new boolean[n][n];
        
        int[] delrow = {-2, -2, +2, +2, -1, +1, +1, -1};
        int[] delcol = {-1, +1, +1, -1, -2, -2, +2, +2};
        
        vis[KnightPos[0]-1][KnightPos[1]-1] = true;
        
        q.add(new Tuple(0, KnightPos[0]-1, KnightPos[1]-1));
        
        while(!q.isEmpty()){
            int steps = q.peek().first;
            int row = q.peek().second;
            int col = q.peek().third;
            q.remove();
            
            if(row==TargetPos[0]-1 && col==TargetPos[1]-1)
                return steps;
            
            for(int i=0;i<8;i++){
                int nrow = row + delrow[i];
                int ncol = col + delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<n && !vis[nrow][ncol]){
                    vis[nrow][ncol] = true;
                    q.add(new Tuple(steps+1, nrow, ncol));
                }
            }
        }
        return -1;
    }
}
